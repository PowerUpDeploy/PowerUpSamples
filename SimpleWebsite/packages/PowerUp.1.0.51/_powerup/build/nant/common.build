<?xml version="1.0" encoding="utf-8"?>
<project>
	<property name="build.configuration" value="Release" unless="${property::exists('build.configuration')}"/>
	<property name="build.platform" value="Any CPU" unless="${property::exists('build.platform')}"/>
	<property name="build.out.dir" value="" unless="${property::exists('build.out.dir')}"/>
	<property name="build.number" value="1" unless="${property::exists('build.number')}"/>
	<tstamp property="build.date" pattern="yyyyMMdd-HHmm" verbose="true"/>
	<property name="build.verbosity" value="Normal" unless="${property::exists('build.verbosity')}"  />
	<property name="build.vcs.number" value="0"/>
	<property name="solution.name" value="${project::get-name()}" unless="${property::exists('solution.name')}"/>
	<property name="solution.extension" value="sln" unless="${property::exists('solution.extension')}"/>
	<property name="solution.dir" value="${project::get-base-directory()}"  unless="${property::exists('solution.dir')}"/>
	<property name="root.dir" value="${project::get-base-directory()}"/>
	<property name="package.name" value="${solution.name}" unless="${property::exists('package.name')}"/>
	<property name="package.dir" value="${solution.dir}\_package"/>
	<property name="version.major" value="1" unless="${property::exists('version.major')}"/>
	<property name="version.minor" value="${build.number}" unless="${property::exists('version.minor')}"/>
	<property name="zip.package" value="true" unless="${property::exists('zip.package')}"/>

	<target name="build-package-common" depends="clean compile-solution package-project copy-build-files create-package-info zip-package"/>

	<target name="whoami">
		<echo message="Running as user:" />
		<exec program="whoami" />
	</target>
	
	<target name="clean" depends="whoami">
		<call target="clean-package"/>	
	</target>	

	<target name="clean-package">
		<delete dir="${package.dir}"/>
		<mkdir dir="${package.dir}"/>
	</target>
	
	<target name="compile-solution">
		<msbuild project="${solution.dir}\${solution.name}.${solution.extension}" verbosity="${build.verbosity}">
			<arg value="/property:Configuration=${build.configuration}"/>
			<arg value="/property:Platform=${build.platform}"/>
			<arg value="/property:OutDir=${build.out.dir}"/>
			<arg value="/target:Rebuild"/>
		</msbuild>
	</target>

	<target name="compile-solution-silverlight-nooutdir">
		<exec program="C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe">
    		<arg line='"${solution.dir}\${solution.name}.${solution.extension}"' />
    		<arg line="/property:Configuration=${build.configuration}"/>
    		<arg value="/target:Rebuild"/>
    		<arg value="/verbosity:${build.verbosity}"/>
    		<arg value="/nologo"/>
    	</exec>
	</target>
	
	<target name="compile-solution-silverlight">
		<exec program="C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe">
    		<arg line='"${solution.dir}\${solution.name}.${solution.extension}"' />
    		<arg line="/property:Configuration=${build.configuration}"/>			
    		<arg line="/property:OutDir=${build.out.dir}"/>			
    		<arg value="/target:Rebuild"/>
    		<arg value="/verbosity:${build.verbosity}"/>
    		<arg value="/nologo"/>
    	</exec>
	</target>	
	
	<target name="copy-build-files">
		<copy todir="${package.dir}" overwrite="true" flatten="false" includeemptydirs="true">
			<fileset basedir="${root.dir}">
				<include name="_powerup*\deploy\**"/>
				<include name="_profilefiles\**"/>
				<include name="_profiletemplates\**"/>
				<include name="_templates\**"/>
				<include name="deploy.ps1"/>
				<include name="settings*.*"/>
				<include name="servers*.*"/>
			</fileset>
		</copy>

		<move todir="${package.dir}" overwrite="true">
			<fileset basedir="${package.dir}\_powerup\deploy\core">
				<include name="deploy.bat"/>
			</fileset>
		</move>
	</target>

	<target name="create-package-info" descripton="Creates an infomation file describing the package.">
		<property name="package.id.file" value="_powerup/build/nant/templates/package.info"/>
		<loadfile file="${package.id.file}" property="package.id.file.content">
			<filterchain>
				<replacetokens>
					<token key="PACKAGENAME" value="${package.name}"/>
					<token key="BUILDNUMBER" value="${build.number}"/>
					<token key="BUILDDATE" value="${build.date}"/>
				</replacetokens>
			</filterchain>
		</loadfile>
		<echo file="${package.dir}\package.id" message="${package.id.file.content}"/>
	</target>

	<target name="zip-package" if="${zip.package}">
		<zip zipfile="${package.dir}\package_${package.name}_${build.number}.zip" includeemptydirs="true">
			<fileset basedir="${package.dir}">
				<include name="**/*"/>
			</fileset>
		</zip>
	</target>

</project>

